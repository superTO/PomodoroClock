// Media step breakpoint mixin based on Angular Material lib
$breakpoints: (
    xs: 'screen and (max-width: 599px)',
    sm: 'screen and (min-width: 600px) and (max-width: 959px)',
    md: 'screen and (min-width: 960px) and (max-width: 1279px)',
    lg: 'screen and (min-width: 1280px) and (max-width: 1919px)',
    xl: 'screen and (min-width: 1920px) and (max-width: 5000px)',
    lt-sm: 'screen and (max-width: 599px)',
    lt-md: 'screen and (max-width: 959px)',
    lt-lg: 'screen and (max-width: 1279px)',
    lt-xl: 'screen and (max-width: 1919px)',
    gt-xs: 'screen and (min-width: 600px)',
    gt-sm: 'screen and (min-width: 960px)',
    gt-md: 'screen and (min-width: 1280px)',
    gt-lg: 'screen and (min-width: 1920px)'
) !default;

// Re-map the breakpoints for the helper classes
$helper-breakpoints: (
    xs: null,
    sm: 'gt-xs',
    md: 'gt-sm',
    lg: 'gt-md',
    xl: 'gt-lg'
);

@mixin media-breakpoint($breakpointName) {

    $mediaQuery: map-get($breakpoints, $breakpointName);

    @if ($mediaQuery == null) {
        @content
    } @else {
        @media #{$mediaQuery} {
            @content
        }
    }
}


// -----------------------------------------------------------------------------------------------------
// @ Typography
// -----------------------------------------------------------------------------------------------------
html {
  font-size: 62.5%;
  font-family: 'Muli', 'Helvetica Neue', 'Arial', sans-serif;
  line-height: 1.4 !important;
  letter-spacing: -0.1px !important;
}

body {
  font-size: 14px;
}

html, body {
  -webkit-font-smoothing: auto;
  -moz-osx-font-smoothing: auto;
}

// Headings
h1, h2, h3, h4, h5, h6,
.h1, .h2, .h3, .h4, .h5, .h6 {
  font-weight: normal;
}

h1, .h1 {
  font-size: 24px;
}

h2, .h2 {
  font-size: 20px;
}

h3, .h3 {
  font-size: 16px;
}

h4, .h4 {
  font-size: 15px;
}

h5, .h5 {
  font-size: 13px;
}

h6, .h6 {
  font-size: 12px;
}

// Links
a {
  text-decoration: none;

  &:not(.mat-button):not(.mat-raised-button):not(.mat-flat-button):not(.mat-stroked-button):not(.mat-icon-button):not(.mat-fab):not(.mat-mini-fab) {

      &:hover, &:active {
          text-decoration: underline;
      }
  }
}

// Abbr
abbr {
  cursor: help;
  border-bottom: 1px dotted rgba(0, 0, 0, 0.54);
}

// Blockquote
blockquote {
  border-left: 3px solid rgba(0, 0, 0, 0.12);
  font-style: italic;
  margin: 1em 0;
  padding-left: 16px;

  footer {
      font-style: normal;

      &:before {
          content: '\2014 \00A0';
      }
  }

  &.reverse {
      border-left: none;
      border-right: 3px solid rgba(0, 0, 0, 0.12);
      text-align: right;
      padding-left: 0;
      padding-right: 16px;

      footer {

          &:before {
              content: '';
          }

          &:after {
              content: '\2014 \00A0';
          }
      }
  }
}

// Code
code {
  font-family: 'Monaco', 'Menlo', 'Consolas', 'Ubuntu Mono', monospace;;

  &:not(.highlight) {
      color: #106CC8;
      padding: 2px 3px;
      border-radius: 2px;
      line-height: 1.7;
  }
}

// Definition lists
dl {

  dt {
      font-weight: bold;
  }

  dd {
      margin: 4px 0 16px 0;
  }
}

// Mark
mark {
  background: #F7F49A;
}

// Pre
pre {
  line-height: 1.6;
  margin: 8px 16px;
  white-space: pre-wrap;
}

// Small
small {
  font-size: 80%;
}

// Table
table {

  thead {

      tr {

          th {
              text-align: left;
          }
      }
  }
}

// Text format helpers
.text-italic {
  font-style: italic;
}

.text-semibold {
  font-weight: 600;
}

.text-bold,
strong {
  font-weight: 700;
}

.text-strike {
  text-decoration: line-through;
}

.text-super {
  vertical-align: super;
}

.text-sub {
  vertical-align: sub;
}

.text-capitalize {
  text-transform: capitalize;
}

.text-lowercase {
  text-transform: lowercase;
}

.text-uppercase {
  text-transform: uppercase;
}

// Text align helpers
.text-left {
  text-align: left;
}

.text-center {
  text-align: center;
}

.text-right {
  text-align: right;
}

// Font weight helpers
@for $weight from 1 through 9 {

  .font-weight-#{$weight * 100} {
      font-weight: #{$weight * 100};
  }
}

// Font size helpers
@for $size from 1 through 60 {

  .font-size-#{$size * 2} {
      font-size: #{$size * 2}px;
  }
}

// Line height helpers
@for $lineHeight from 1 through 60 {

  .line-height-#{$lineHeight * 2} {
      line-height: #{$lineHeight * 2}px;
  }
}

.line-height-1 {
  line-height: 1;
}

.line-height-1\.25 {
  line-height: 1.25;
}

.line-height-1\.5,
.line-height-1\.50 {
  line-height: 1.5;
}

.line-height-1\.75 {
  line-height: 1.75;
}

// Letter spacing helpers
.letter-spacing-condensed {
  letter-spacing: -0.02em;
}

.letter-spacing-normal {
  letter-spacing: normal;
}

.letter-spacing-relaxed {
  letter-spacing: 0.02em;
}

// Boxed text
.text-boxed {
  border-radius: 2px;
  padding: 4px 8px;
  margin: 0 8px;
  font-size: 11px;
  font-weight: 600;
  white-space: nowrap;
}

// Truncate
.text-truncate {
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Nowrap
.text-nowrap {
  white-space: nowrap;
}

// Message boxes
.message-box {
  padding: 16px;
  background: #607D8B;
  border-left: 6px solid #37474F;
  color: rgba(255, 255, 255, 1);

  &.error {
      background: #EF5350;
      border-left-color: #B71C1C;
  }

  &.warning {
      background: #FFECB3;
      border-left-color: #FFC107;
      color: rgba(0, 0, 0, 0.87);
  }

  &.success {
      background: #4CAF50;
      border-left-color: #2E7D32;
  }

  &.info {
      background: #B3E5FC;
      border-left-color: #03A9F4;
      color: rgba(0, 0, 0, 0.87);
  }
}


// -----------------------------------------------------------------------------------------------------
// @ Position helpers
// -----------------------------------------------------------------------------------------------------
@each $breakpoint, $materialBreakpoint in $helper-breakpoints {

  @include media-breakpoint($materialBreakpoint) {

      $infix: if($materialBreakpoint == null, "", "-#{$breakpoint}");

      .position#{$infix}-relative {
          position: relative;
      }

      .position#{$infix}-absolute {
          position: absolute;
      }

      .position#{$infix}-static {
          position: static;
      }
  }
}

// -----------------------------------------------------------------------------------------------------
// @ Absolute position alignment helpers
// -----------------------------------------------------------------------------------------------------
@each $breakpoint, $materialBreakpoint in $helper-breakpoints {

  @include media-breakpoint($materialBreakpoint) {

      $infix: if($materialBreakpoint == null, "", "-#{$breakpoint}");

      .align#{$infix}-top {
          top: 0;
      }

      .align#{$infix}-right {
          right: 0;
      }

      .align#{$infix}-bottom {
          bottom: 0;
      }

      .align#{$infix}-left {
          left: 0;
      }
  }
}

// -----------------------------------------------------------------------------------------------------
// @ Size helpers
// -----------------------------------------------------------------------------------------------------
@each $prop, $abbrev in (height: h, width: w) {

  @for $index from 0 through 180 {
      $size: $index * 4;
      $length: #{$size}px;

      .#{$abbrev}-#{$size} {
          #{$prop}: $length !important;
          min-#{$prop}: $length !important;
          max-#{$prop}: $length !important;
      }
  }

  // Percentage
  @for $i from 0 through 20 {
      $i-p: 5 * $i;
      $size-p: 5% * $i;

      .#{$abbrev}-#{$i-p}-p {
          #{$prop}: $size-p !important;
      }
  }
}

// -----------------------------------------------------------------------------------------------------
// @ Spacing helpers
// -----------------------------------------------------------------------------------------------------
@each $breakpoint, $materialBreakpoint in $helper-breakpoints {

  @include media-breakpoint($materialBreakpoint) {

      $infix: if($materialBreakpoint == null, "", "-#{$breakpoint}");

      @each $prop, $abbrev in (margin: m, padding: p) {

          @for $index from 0 through 64 {
              $size: $index * 4;
              $length: #{$size}px;

              .#{$abbrev}#{$infix}-#{$size} {
                  #{$prop}: $length !important;
              }
          }

          @for $index from 0 through 64 {
              $size: $index * 4;
              $length: #{$size}px;

              .#{$abbrev}x#{$infix}-#{$size} {
                  #{$prop}-right: $length !important;
                  #{$prop}-left: $length !important;
              }

              .#{$abbrev}y#{$infix}-#{$size} {
                  #{$prop}-top: $length !important;
                  #{$prop}-bottom: $length !important;
              }
          }

          @for $index from 0 through 64 {
              $size: $index * 4;
              $length: #{$size}px;

              .#{$abbrev}t#{$infix}-#{$size} {
                  #{$prop}-top: $length !important;
              }

              .#{$abbrev}r#{$infix}-#{$size} {
                  #{$prop}-right: $length !important;
              }

              .#{$abbrev}b#{$infix}-#{$size} {
                  #{$prop}-bottom: $length !important;
              }

              .#{$abbrev}l#{$infix}-#{$size} {
                  #{$prop}-left: $length !important;
              }
          }

          @if ($abbrev == m) {

              // Some special margin utils for flex alignments
              .m#{$infix}-auto {
                  margin: auto !important;
              }

              .mt#{$infix}-auto {
                  margin-top: auto !important;
              }

              .mr#{$infix}-auto {
                  margin-right: auto !important;
              }

              .mb#{$infix}-auto {
                  margin-bottom: auto !important;
              }

              .ml#{$infix}-auto {
                  margin-left: auto !important;
              }

              .mx#{$infix}-auto {
                  margin-right: auto !important;
                  margin-left: auto !important;
              }

              .my#{$infix}-auto {
                  margin-top: auto !important;
                  margin-bottom: auto !important;
              }
          }
      }
  }
}

// -----------------------------------------------------------------------------------------------------
// @ Border helpers
// -----------------------------------------------------------------------------------------------------
$border-style: 1px solid rgba(0, 0, 0, 0.12);

.border,
.b {
  border: $border-style;
}

.border-top,
.bt {
  border-top: $border-style;
}

.border-right,
.br {
  border-right: $border-style;
}

.border-bottom,
.bb {
  border-bottom: $border-style;
}

.border-left,
.bl {
  border-left: $border-style;
}

.border-horizontal,
.bx {
  border-left: $border-style;
  border-right: $border-style;
}

.border-vertical,
.by {
  border-top: $border-style;
  border-bottom: $border-style;
}

// -----------------------------------------------------------------------------------------------------
// @ Border radius helpers
// -----------------------------------------------------------------------------------------------------
.border-radius-100 {
  border-radius: 100%;
}

.border-radius-2 {
  border-radius: 2px;
}

.border-radius-4 {
  border-radius: 4px;
}

.border-radius-8 {
  border-radius: 8px;
}

.border-radius-16 {
  border-radius: 16px;
}

// -----------------------------------------------------------------------------------------------------
// @ Cursor helpers
// -----------------------------------------------------------------------------------------------------
.cursor-pointer {
  cursor: pointer;
}

.cursor-default {
  cursor: default;
}
